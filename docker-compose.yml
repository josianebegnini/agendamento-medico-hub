version: "3.8"

services:
  # üêò Banco de dados PostgreSQL
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: agendamento
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # üîç Healthcheck: garante que o banco est√° pronto antes de liberar dependentes
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d agendamento"]
      interval: 5s
      timeout: 5s
      retries: 10

  # üß© Microservi√ßo de Pacientes
  ms-paciente:
    build:
      context: ./ms-paciente
    container_name: ms-paciente
    restart: always
    ports:
      - "8082:8082"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/agendamento
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: pass
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect

  # üåê Gateway principal
  gw-agendamento-medico:
    build:
      context: ./gw-agendamento-medico
    container_name: gw-agendamento-medico
    restart: always
    ports:
      - "8085:8085"
    depends_on:
      - ms-paciente
    environment:
      SPRING_PROFILES_ACTIVE: docker

  # üíª Aplica√ß√£o Front-End (HTML + Thymeleaf)
  agendamento-medico-front:
    build:
      context: ./agendamento-medico-front
    container_name: agendamento-medico-front
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - gw-agendamento-medico
    environment:
      APP_GATEWAY_BASE_URL: http://gw-agendamento-medico:8085

# üíæ Volume persistente para o PostgreSQL
volumes:
  postgres_data:
